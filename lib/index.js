"use strict";
/**
 * Created by user on 2018/1/28/028.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const deepmerge = require("deepmerge-plus");
exports.deepmerge = deepmerge;
const moment = require("moment");
exports.moment = moment;
const mdconf = require("mdconf2");
exports.mdconf = mdconf;
const jsdom_url_1 = require("jsdom-url");
const array_hyper_unique_1 = require("array-hyper-unique");
exports.array_unique = array_hyper_unique_1.array_unique;
exports.deepmergeOptions = {
    isMergeableObject(value, isMergeableObject) {
        let bool;
        if (moment.isMoment(value) || mdconf.RawObject.isRawObject(value)) {
            return false;
        }
        if (value instanceof jsdom_url_1.URL || value && typeof value.href == 'string') {
            return false;
        }
    }
};
function _prefix_to_fn(prefix) {
    if (typeof prefix === 'string') {
        prefix = new RegExp(`^${prefix}`);
    }
    if (typeof prefix === 'function') {
        return prefix;
    }
    else if (prefix instanceof RegExp) {
        //prefix.test('');
        return (key, value) => prefix.test(key);
    }
    throw new TypeError(`not a function , string, RegExp: ${prefix}`);
}
exports._prefix_to_fn = _prefix_to_fn;
function filterByPrefix(prefix, obj, options = {}) {
    let fn = _prefix_to_fn(prefix);
    let ignore;
    if (options && options.ignore) {
        ignore = _prefix_to_fn(options.ignore);
    }
    return (Object.entries(obj))
        .filter(([key, value]) => {
        if (ignore && ignore(key, value)) {
            return false;
        }
        return fn(key, value);
    });
}
exports.filterByPrefix = filterByPrefix;
function filterByPrefixReturnKeys(prefix, obj, options) {
    return filterByPrefix(prefix, obj, options)
        .map(item => item[0]);
}
exports.filterByPrefixReturnKeys = filterByPrefixReturnKeys;
function filterByPrefixReturnValues(prefix, obj, options) {
    return filterByPrefix(prefix, obj, options)
        .map(item => item[1]);
}
exports.filterByPrefixReturnValues = filterByPrefixReturnValues;
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsNENBQTZDO0FBT3BDLDhCQUFTO0FBTGxCLGlDQUFrQztBQUtkLHdCQUFNO0FBSjFCLGtDQUFtQztBQUlQLHdCQUFNO0FBSGxDLHlDQUFnQztBQUNoQywyREFBa0Q7QUFJekMsdUJBSkEsaUNBQVksQ0FJQTtBQUVSLFFBQUEsZ0JBQWdCLEdBQXdCO0lBQ3BELGlCQUFpQixDQUFDLEtBQUssRUFBRSxpQkFBaUI7UUFDekMsSUFBSSxJQUFJLENBQUM7UUFFVCxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDbEUsT0FBTyxLQUFLLENBQUM7U0FDYjtRQUVELElBQUksS0FBSyxZQUFZLGVBQUcsSUFBSSxLQUFLLElBQUksT0FBTyxLQUFLLENBQUMsSUFBSSxJQUFJLFFBQVEsRUFDbEU7WUFDQyxPQUFPLEtBQUssQ0FBQztTQUNiO0lBQ0YsQ0FBQztDQUNELENBQUM7QUFRRixTQUFnQixhQUFhLENBQW9CLE1BQXlCO0lBRXpFLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUM5QjtRQUNDLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLE1BQU0sRUFBRSxDQUFDLENBQUM7S0FDbEM7SUFFRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsRUFDaEM7UUFDQyxPQUFPLE1BQU0sQ0FBQTtLQUNiO1NBQ0ksSUFBSSxNQUFNLFlBQVksTUFBTSxFQUNqQztRQUNDLGtCQUFrQjtRQUVsQixPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUUsTUFBaUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7S0FDbkQ7SUFFRCxNQUFNLElBQUksU0FBUyxDQUFDLG9DQUFvQyxNQUFNLEVBQUUsQ0FBQyxDQUFBO0FBQ2xFLENBQUM7QUFuQkQsc0NBbUJDO0FBRUQsU0FBZ0IsY0FBYyxDQUFvQixNQUF5QixFQUFFLEdBRTVFLEVBQUUsVUFFQyxFQUFFO0lBRUwsSUFBSSxFQUFFLEdBQUcsYUFBYSxDQUFJLE1BQU0sQ0FBQyxDQUFDO0lBRWxDLElBQUksTUFBMkIsQ0FBQztJQUVoQyxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsTUFBTSxFQUM3QjtRQUNDLE1BQU0sR0FBRyxhQUFhLENBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQzFDO0lBRUQsT0FBTyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUksR0FBVSxDQUFDLENBQUM7U0FDcEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUV4QixJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxFQUNoQztZQUNDLE9BQU8sS0FBSyxDQUFDO1NBQ2I7UUFFRCxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQyxDQUFDLENBQ0Y7QUFDRixDQUFDO0FBMUJELHdDQTBCQztBQUVELFNBQWdCLHdCQUF3QixDQUFvQixNQUF5QixFQUFFLEdBRXRGLEVBQUUsT0FFRjtJQUVBLE9BQU8sY0FBYyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDO1NBQ3pDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3ZCLENBQUM7QUFSRCw0REFRQztBQUVELFNBQWdCLDBCQUEwQixDQUFvQixNQUF5QixFQUFFLEdBRXhGLEVBQUUsT0FFRjtJQUVBLE9BQU8sY0FBYyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxDQUFDO1NBQ3pDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ3ZCLENBQUM7QUFSRCxnRUFRQztBQUVELGtCQUFlLE9BQW1DLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgdXNlciBvbiAyMDE4LzEvMjgvMDI4LlxuICovXG5cbmltcG9ydCBkZWVwbWVyZ2UgPSByZXF1aXJlKCdkZWVwbWVyZ2UtcGx1cycpO1xuaW1wb3J0IGRlZXBtZXJnZU5TIGZyb20gJ2RlZXBtZXJnZS1wbHVzL2NvcmUnO1xuaW1wb3J0IG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xuaW1wb3J0IG1kY29uZiA9IHJlcXVpcmUoJ21kY29uZjInKTtcbmltcG9ydCB7IFVSTCB9IGZyb20gJ2pzZG9tLXVybCc7XG5pbXBvcnQgeyBhcnJheV91bmlxdWUgfSBmcm9tICdhcnJheS1oeXBlci11bmlxdWUnO1xuXG5leHBvcnQgeyBkZWVwbWVyZ2UsIG1vbWVudCwgbWRjb25mIH1cblxuZXhwb3J0IHsgYXJyYXlfdW5pcXVlIH1cblxuZXhwb3J0IGNvbnN0IGRlZXBtZXJnZU9wdGlvbnM6IGRlZXBtZXJnZU5TLk9wdGlvbnMgPSB7XG5cdGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlLCBpc01lcmdlYWJsZU9iamVjdCkge1xuXHRcdGxldCBib29sO1xuXG5cdFx0aWYgKG1vbWVudC5pc01vbWVudCh2YWx1ZSkgfHwgbWRjb25mLlJhd09iamVjdC5pc1Jhd09iamVjdCh2YWx1ZSkpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRpZiAodmFsdWUgaW5zdGFuY2VvZiBVUkwgfHwgdmFsdWUgJiYgdHlwZW9mIHZhbHVlLmhyZWYgPT0gJ3N0cmluZycpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxufTtcblxudHlwZSBJRmlsdGVyUGF0dGVybkZuPFQgZXh0ZW5kcyB1bmtub3duPiA9ICgoa2V5OiBzdHJpbmcsIHZhbHVlOiBUIHwgdW5rbm93bikgPT4gYm9vbGVhbik7XG5cbnR5cGUgSUZpbHRlclBhdHRlcm48VCBleHRlbmRzIHVua25vd24+ID0gSUZpbHRlclBhdHRlcm5GbjxUPiB8IHN0cmluZyB8IFJlZ0V4cDtcblxudHlwZSBJRW50cmllczxUIGV4dGVuZHMgdW5rbm93bj4gPSBbc3RyaW5nLCBUXVtdXG5cbmV4cG9ydCBmdW5jdGlvbiBfcHJlZml4X3RvX2ZuPFQgZXh0ZW5kcyB1bmtub3duPihwcmVmaXg6IElGaWx0ZXJQYXR0ZXJuPFQ+KTogSUZpbHRlclBhdHRlcm5GbjxUPlxue1xuXHRpZiAodHlwZW9mIHByZWZpeCA9PT0gJ3N0cmluZycpXG5cdHtcblx0XHRwcmVmaXggPSBuZXcgUmVnRXhwKGBeJHtwcmVmaXh9YCk7XG5cdH1cblxuXHRpZiAodHlwZW9mIHByZWZpeCA9PT0gJ2Z1bmN0aW9uJylcblx0e1xuXHRcdHJldHVybiBwcmVmaXhcblx0fVxuXHRlbHNlIGlmIChwcmVmaXggaW5zdGFuY2VvZiBSZWdFeHApXG5cdHtcblx0XHQvL3ByZWZpeC50ZXN0KCcnKTtcblxuXHRcdHJldHVybiAoa2V5LCB2YWx1ZSkgPT4gKHByZWZpeCBhcyBSZWdFeHApLnRlc3Qoa2V5KVxuXHR9XG5cblx0dGhyb3cgbmV3IFR5cGVFcnJvcihgbm90IGEgZnVuY3Rpb24gLCBzdHJpbmcsIFJlZ0V4cDogJHtwcmVmaXh9YClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlckJ5UHJlZml4PFQgZXh0ZW5kcyB1bmtub3duPihwcmVmaXg6IElGaWx0ZXJQYXR0ZXJuPFQ+LCBvYmo6IHtcblx0W2s6IHN0cmluZ106IFQgfCB1bmtub3duXG59LCBvcHRpb25zOiB7XG5cdGlnbm9yZT86IElGaWx0ZXJQYXR0ZXJuPFQ+LFxufSA9IHt9KTogSUVudHJpZXM8VD5cbntcblx0bGV0IGZuID0gX3ByZWZpeF90b19mbjxUPihwcmVmaXgpO1xuXG5cdGxldCBpZ25vcmU6IElGaWx0ZXJQYXR0ZXJuRm48VD47XG5cblx0aWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5pZ25vcmUpXG5cdHtcblx0XHRpZ25vcmUgPSBfcHJlZml4X3RvX2ZuPFQ+KG9wdGlvbnMuaWdub3JlKTtcblx0fVxuXG5cdHJldHVybiAoT2JqZWN0LmVudHJpZXM8VD4ob2JqIGFzIGFueSkpXG5cdFx0LmZpbHRlcigoW2tleSwgdmFsdWVdKSA9PlxuXHRcdHtcblx0XHRcdGlmIChpZ25vcmUgJiYgaWdub3JlKGtleSwgdmFsdWUpKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbihrZXksIHZhbHVlKTtcblx0XHR9KVxuXHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJCeVByZWZpeFJldHVybktleXM8VCBleHRlbmRzIHVua25vd24+KHByZWZpeDogSUZpbHRlclBhdHRlcm48VD4sIG9iajoge1xuXHRbazogc3RyaW5nXTogVCB8IHVua25vd25cbn0sIG9wdGlvbnM/OiB7XG5cdGlnbm9yZT86IElGaWx0ZXJQYXR0ZXJuPFQ+LFxufSlcbntcblx0cmV0dXJuIGZpbHRlckJ5UHJlZml4KHByZWZpeCwgb2JqLCBvcHRpb25zKVxuXHRcdC5tYXAoaXRlbSA9PiBpdGVtWzBdKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyQnlQcmVmaXhSZXR1cm5WYWx1ZXM8VCBleHRlbmRzIHVua25vd24+KHByZWZpeDogSUZpbHRlclBhdHRlcm48VD4sIG9iajoge1xuXHRbazogc3RyaW5nXTogVCB8IHVua25vd25cbn0sIG9wdGlvbnM/OiB7XG5cdGlnbm9yZT86IElGaWx0ZXJQYXR0ZXJuPFQ+LFxufSlcbntcblx0cmV0dXJuIGZpbHRlckJ5UHJlZml4KHByZWZpeCwgb2JqLCBvcHRpb25zKVxuXHRcdC5tYXAoaXRlbSA9PiBpdGVtWzFdKVxufVxuXG5leHBvcnQgZGVmYXVsdCBleHBvcnRzIGFzIHR5cGVvZiBpbXBvcnQoJy4vaW5kZXgnKTtcbiJdfQ==