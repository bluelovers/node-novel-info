"use strict";
/**
 * Created by user on 2018/1/27/027.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const mdconf = require("mdconf2");
exports.mdconf = mdconf;
const crlf_normalize_1 = require("crlf-normalize");
exports.crlf = crlf_normalize_1.crlf;
exports.LF = crlf_normalize_1.LF;
const lib_1 = require("./lib");
exports.array_unique = lib_1.array_unique;
exports.deepmerge = lib_1.deepmerge;
exports.deepmergeOptions = lib_1.deepmergeOptions;
const isPlainObject = require("is-plain-object");
const sortObjectKeys = require("sort-object-keys2");
const json_1 = require("./json");
const env_bool_1 = require("env-bool");
exports.envVal = env_bool_1.envVal;
exports.envBool = env_bool_1.envBool;
const hex_lib_1 = require("hex-lib");
const chai_1 = require("chai");
exports.defaultOptionsParse = {
    removeRawData: true,
    disableKeyToLowerCase: true,
};
function stringify(data, d2, ...argv) {
    data = json_1.default.toNovelInfo(data, d2 || {}, {
        novel: {
            tags: [],
        },
    }, ...argv);
    data = sortKeys(data);
    data.novel.tags.unshift('node-novel');
    data.novel.tags = lib_1.array_unique(data.novel.tags);
    if (data.novel.preface && typeof data.novel.preface == 'string') {
        data.novel.preface = new mdconf.RawObject(data.novel.preface, {});
    }
    if ('novel_status' in data.novel) {
        chai_1.expect(data.novel.novel_status).a('number');
        data.novel.novel_status = hex_lib_1.toHex(data.novel.novel_status, 4);
    }
    return mdconf.stringify(data) + crlf_normalize_1.LF.repeat(2);
}
exports.stringify = stringify;
function parse(data, options = {}) {
    if (options.removeRawData) {
        options.oldParseApi = options.removeRawData;
    }
    if (options.disableKeyToLowerCase == null) {
        options.disableKeyToLowerCase = true;
    }
    let ret = mdconf.parse(crlf_normalize_1.crlf(data.toString()), options);
    try {
        if (ret.novel.preface) {
            ret.novel.preface = (ret.novel.preface
                && ret.novel.preface.length
                && Array.isArray(ret.novel.preface)) ? ret.novel.preface.join(crlf_normalize_1.LF) : ret.novel.preface;
        }
        ret.options = lib_1.deepmerge(ret.options || {}, {
            textlayout: {},
        }, lib_1.deepmergeOptions);
    }
    catch (e) {
        console.error(e.toString());
    }
    if (options.chk || options.chk == null) {
        ret = chkInfo(ret, options);
    }
    if (options.throw || options.throw == null) {
        ret = chkInfo(ret, options);
        if (!ret) {
            throw new Error('mdconf_parse');
        }
    }
    if (ret) {
        ret = sortKeys(ret);
        //console.log(777);
    }
    return ret;
}
exports.parse = parse;
function sortKeys(ret) {
    ret = sortObjectKeys(ret, [
        'novel',
        'contribute',
        'options',
    ]);
    sortSubKey('novel', [
        'title',
        'title_short',
        'title_zh',
        'title_zh1',
        'title_zh2',
        'title_en',
        'title_jp',
        'title_output',
        'title_other',
        'author',
        'source',
        'cover',
        'publisher',
        'date',
        'status',
        'novel_status',
        'r18',
        'series',
        'preface',
        'tags',
    ]);
    sortSubKey(['novel', 'tags'], null, true);
    sortSubKey('contribute', null, true);
    sortSubKey('options');
    function sortSubKey(key, sortList, unique) {
        let obj = ret;
        let parent = obj;
        //console.log(obj, sortList);
        if (Array.isArray(key)) {
            //console.log(key);
            let _k;
            for (let value of key) {
                if (!(value in obj)) {
                    //console.log(value, parent);
                    return;
                }
                _k = value;
                parent = obj;
                obj = parent[value];
            }
            key = _k;
        }
        else if ((key in parent)) {
            obj = parent[key];
        }
        else {
            return;
        }
        if (Array.isArray(obj)) {
            obj.sort();
            parent[key] = obj;
            if (unique) {
                parent[key] = parent[key].filter(function (v) {
                    return v;
                });
                parent[key] = lib_1.array_unique(parent[key]);
                if (parent[key].length == 1 && (parent[key][0] === null || typeof parent[key][0] == 'undefined')) {
                    parent[key] = [];
                }
            }
            return;
        }
        if (isPlainObject(obj)) {
            parent[key] = sortObjectKeys(obj, sortList);
        }
    }
    return ret;
}
exports.sortKeys = sortKeys;
function chkInfo(ret, options = {}) {
    if (!ret
        || ((!options || !options.lowCheckLevel)
            && (!ret.novel || !ret.novel.title))) {
        return null;
    }
    if (ret.novel) {
        [
            'authors',
            'illust',
            'tags',
            'sources',
        ].forEach(k => {
            if (k in ret.novel) {
                ret.novel[k] = anyToArray(ret.novel[k], true);
            }
        });
        if ('novel_status' in ret.novel) {
            ret.novel.novel_status = env_bool_1.envVal(ret.novel.novel_status);
            if (typeof ret.novel.novel_status === 'string' && /^0x[\da-f]+$/.test(ret.novel.novel_status)) {
                ret.novel.novel_status = Number(ret.novel.novel_status);
            }
        }
    }
    if ('contribute' in ret) {
        ret.contribute = anyToArray(ret.contribute, true);
    }
    ret.options = ret.options || {};
    if (typeof ret.options.textlayout === 'object') {
        Object.entries(ret.options.textlayout)
            .forEach(([k, v]) => ret.options.textlayout[k] = env_bool_1.envVal(v));
    }
    if (typeof ret.options.downloadOptions === 'object') {
        Object.entries(ret.options.downloadOptions)
            .forEach(([k, v]) => ret.options.downloadOptions[k] = env_bool_1.envVal(v));
    }
    return ret;
}
exports.chkInfo = chkInfo;
function getNovelTitleFromMeta(meta) {
    if (meta && meta.novel) {
        let arr = [
            'title',
            'title_source',
            'title_jp',
            'title_ja',
            'title_zh',
            'title_tw',
            'title_cn',
        ].concat(Object.keys(meta.novel))
            .reduce(function (a, key) {
            if (key.indexOf('title') === 0) {
                a.push(meta.novel[key]);
            }
            return a;
        }, []);
        if (meta.novel.series) {
            arr.push(meta.novel.series.name);
            arr.push(meta.novel.series.name_short);
        }
        arr = lib_1.array_unique(arr.filter(v => v && ![
            'undefined',
            '長編 【連載】',
            '連載中',
        ].includes(v)));
        return arr;
    }
    return [];
}
exports.getNovelTitleFromMeta = getNovelTitleFromMeta;
function anyToArray(input, unique) {
    if (typeof input != 'object') {
        input = [input];
    }
    if (unique) {
        input = lib_1.array_unique(input || []);
    }
    // @ts-ignore
    return input;
}
exports.version = require("./package.json").version;
const self = require("./index");
exports.mdconf_parse = self.parse;
exports.default = self;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBR0gsa0NBQWtDO0FBV3pCLHdCQUFNO0FBVmYsbURBQTBDO0FBVVgsZUFWdEIscUJBQUksQ0FVc0I7QUFBRSxhQVZ0QixtQkFBRSxDQVVzQjtBQVR2QywrQkFBa0U7QUFTakQsdUJBVFIsa0JBQVksQ0FTUTtBQUNwQixvQkFWYyxlQUFTLENBVWQ7QUFBRSwyQkFWYyxzQkFBZ0IsQ0FVZDtBQVJwQyxpREFBaUQ7QUFDakQsb0RBQW9EO0FBQ3BELGlDQUE0QjtBQUM1Qix1Q0FBMkM7QUFNbEMsaUJBTkEsaUJBQU0sQ0FNQTtBQUFFLGtCQU5BLGtCQUFPLENBTUE7QUFMeEIscUNBQWdDO0FBQ2hDLCtCQUE4QjtBQWdIakIsUUFBQSxtQkFBbUIsR0FBa0I7SUFDakQsYUFBYSxFQUFFLElBQUk7SUFDbkIscUJBQXFCLEVBQUUsSUFBSTtDQUMzQixDQUFDO0FBRUYsU0FBZ0IsU0FBUyxDQUFDLElBQUksRUFBRSxFQUFHLEVBQUUsR0FBRyxJQUFJO0lBRTNDLElBQUksR0FBRyxjQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFO1FBQ3pDLEtBQUssRUFBRTtZQUNOLElBQUksRUFBRSxFQUFFO1NBQ1I7S0FDRCxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFFWixJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN0QyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksR0FBRyxrQkFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFaEQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxPQUFPLElBQUksQ0FBQyxL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OlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxOC8xLzI3LzAyNy5cbiAqL1xuXG5pbXBvcnQgeyBFbnVtTm92ZWxTdGF0dXMgfSBmcm9tICcuL2xpYi9jb25zdCc7XG5pbXBvcnQgKiBhcyBtZGNvbmYgZnJvbSAnbWRjb25mMic7XG5pbXBvcnQgeyBjcmxmLCBMRiB9IGZyb20gJ2NybGYtbm9ybWFsaXplJztcbmltcG9ydCB7IGFycmF5X3VuaXF1ZSwgZGVlcG1lcmdlLCBkZWVwbWVyZ2VPcHRpb25zIH0gZnJvbSAnLi9saWInO1xuaW1wb3J0ICogYXMgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgKiBhcyBpc1BsYWluT2JqZWN0IGZyb20gJ2lzLXBsYWluLW9iamVjdCc7XG5pbXBvcnQgKiBhcyBzb3J0T2JqZWN0S2V5cyBmcm9tICdzb3J0LW9iamVjdC1rZXlzMic7XG5pbXBvcnQgSnNvbk1kIGZyb20gJy4vanNvbic7XG5pbXBvcnQgeyBlbnZWYWwsIGVudkJvb2wgfSBmcm9tICdlbnYtYm9vbCc7XG5pbXBvcnQgeyB0b0hleCB9IGZyb20gJ2hleC1saWInO1xuaW1wb3J0IHsgZXhwZWN0IH0gZnJvbSAnY2hhaSc7XG5cbmV4cG9ydCB7IG1kY29uZiwgYXJyYXlfdW5pcXVlLCBjcmxmLCBMRiB9XG5leHBvcnQgeyBkZWVwbWVyZ2UsIGRlZXBtZXJnZU9wdGlvbnMgfVxuZXhwb3J0IHsgZW52VmFsLCBlbnZCb29sIH1cblxuZXhwb3J0IHR5cGUgSU51bWJlciA9IG51bWJlciB8IHN0cmluZztcblxuZXhwb3J0IGludGVyZmFjZSBJTWRjb25mTWV0YU9wdGlvbnNCYXNlPFQgPSBhbnk+XG57XG5cdFtrZXk6IHN0cmluZ106IFQsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1kY29uZk1ldGFPcHRpb25zTm92ZWxTaXRlIGV4dGVuZHMgSU1kY29uZk1ldGFPcHRpb25zQmFzZVxue1xuXHRub3ZlbF9pZD86IElOdW1iZXIsXG5cdHVybD86IHN0cmluZyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJTWRjb25mTWV0YVxue1xuXHRub3ZlbD86IHtcblx0XHR0aXRsZT86IHN0cmluZyxcblx0XHR0aXRsZV9zb3VyY2U/OiBzdHJpbmcsXG5cblx0XHR0aXRsZV9zaG9ydD86IHN0cmluZyxcblx0XHR0aXRsZV9vdXRwdXQ/OiBzdHJpbmcsXG5cdFx0dGl0bGVfb3RoZXI/OiBzdHJpbmcsXG5cblx0XHR0aXRsZV96aDE/OiBzdHJpbmcsXG5cdFx0dGl0bGVfemgyPzogc3RyaW5nLFxuXG5cdFx0dGl0bGVfemg/OiBzdHJpbmcsXG5cdFx0dGl0bGVfY24/OiBzdHJpbmcsXG5cdFx0dGl0bGVfdHc/OiBzdHJpbmcsXG5cdFx0dGl0bGVfZW4/OiBzdHJpbmcsXG5cdFx0dGl0bGVfanA/OiBzdHJpbmcsXG5cblx0XHRhdXRob3I/OiBzdHJpbmcsXG5cdFx0YXV0aG9ycz86IHN0cmluZ1tdLFxuXG5cdFx0Y292ZXI/OiBzdHJpbmcsXG5cdFx0aWxsdXN0Pzogc3RyaW5nW10sXG5cblx0XHRwcmVmYWNlPzogc3RyaW5nLFxuXHRcdHRhZ3M/OiBzdHJpbmdbXSxcblx0XHRkYXRlPzogc3RyaW5nLFxuXHRcdHN0YXR1cz86IHN0cmluZyxcblx0XHRyMTg/OiBzdHJpbmcsXG5cblx0XHRzZXJpZXM/OiB7XG5cdFx0XHRuYW1lPzogc3RyaW5nLFxuXHRcdFx0bmFtZV9zaG9ydD86IHN0cmluZyxcblx0XHRcdHBvc2l0aW9uPzogbnVtYmVyLFxuXHRcdH0sXG5cblx0XHRzb3VyY2U/OiBzdHJpbmcsXG5cdFx0c291cmNlcz86IHN0cmluZ1tdLFxuXG5cdFx0cHVibGlzaGVyPzogc3RyaW5nLFxuXG5cdFx0bm92ZWxfc3RhdHVzPzogRW51bU5vdmVsU3RhdHVzLFxuXHR9XG5cblx0Y29udHJpYnV0ZT86IHN0cmluZ1tdLFxuXG5cdG9wdGlvbnM/OiBJTWRjb25mTWV0YU9wdGlvbnNCYXNlICYge1xuXG5cdFx0ZG16aj86IElNZGNvbmZNZXRhT3B0aW9uc05vdmVsU2l0ZSxcblx0XHRrYWt1eW9tdT86IElNZGNvbmZNZXRhT3B0aW9uc05vdmVsU2l0ZSxcblx0XHR3ZW5rdTg/OiBJTWRjb25mTWV0YU9wdGlvbnNOb3ZlbFNpdGUsXG5cdFx0d2VicXhzPzogSU1kY29uZk1ldGFPcHRpb25zTm92ZWxTaXRlLFxuXHRcdHN5b3NldHU/OiBJTWRjb25mTWV0YU9wdGlvbnNOb3ZlbFNpdGUgJiB7XG5cdFx0XHR0eHRkb3dubG9hZF9pZDogSU51bWJlcixcblx0XHR9LFxuXG5cdFx0bm92ZWw/OiBJTWRjb25mTWV0YU9wdGlvbnNCYXNlICYge1xuXHRcdFx0cGF0dGVybj86IHN0cmluZyxcblx0XHR9LFxuXG5cdFx0dGV4dGxheW91dD86IElNZGNvbmZNZXRhT3B0aW9uc0Jhc2UgJiB7XG5cdFx0XHRhbGxvd19sZjI/OiBib29sZWFuLFxuXHRcdFx0YWxsb3dfbGYzPzogYm9vbGVhbixcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogbm92ZWwtZG93bmxvYWRlclxuXHRcdCAqL1xuXHRcdGRvd25sb2FkT3B0aW9ucz86IElNZGNvbmZNZXRhT3B0aW9uc0Jhc2UgJiB7XG5cdFx0XHRub0ZpcmVQcmVmaXg/OiBib29sZWFuLFxuXHRcdFx0bm9GaWxlUGFkZW5kPzogYm9vbGVhbixcblx0XHRcdGZpbGVQcmVmaXhNb2RlPzogbnVtYmVyLFxuXHRcdFx0c3RhcnRJbmRleD86IG51bWJlcixcblx0XHR9LFxuXG5cdH0sXG5cblx0bGluaz86IHN0cmluZ1tdLFxufVxuXG5leHBvcnQgdHlwZSBJT3B0aW9uc1BhcnNlID0gbWRjb25mLklPcHRpb25zUGFyc2UgJiB7XG5cdGNoaz86IGJvb2xlYW4sXG5cdHRocm93PzogYm9vbGVhbixcblxuXHRyZW1vdmVSYXdEYXRhPzogYm9vbGVhbixcblxuXHQvKipcblx0ICog5YWB6Kix5q6Y57y65LiN5ZCI5rOV55qEIG1ldGEgaW5mb1xuXHQgKi9cblx0bG93Q2hlY2tMZXZlbD86IGJvb2xlYW4sXG59XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0T3B0aW9uc1BhcnNlOiBJT3B0aW9uc1BhcnNlID0ge1xuXHRyZW1vdmVSYXdEYXRhOiB0cnVlLFxuXHRkaXNhYmxlS2V5VG9Mb3dlckNhc2U6IHRydWUsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5KGRhdGEsIGQyPywgLi4uYXJndik6IHN0cmluZ1xue1xuXHRkYXRhID0gSnNvbk1kLnRvTm92ZWxJbmZvKGRhdGEsIGQyIHx8IHt9LCB7XG5cdFx0bm92ZWw6IHtcblx0XHRcdHRhZ3M6IFtdLFxuXHRcdH0sXG5cdH0sIC4uLmFyZ3YpO1xuXG5cdGRhdGEgPSBzb3J0S2V5cyhkYXRhKTtcblx0ZGF0YS5ub3ZlbC50YWdzLnVuc2hpZnQoJ25vZGUtbm92ZWwnKTtcblx0ZGF0YS5ub3ZlbC50YWdzID0gYXJyYXlfdW5pcXVlKGRhdGEubm92ZWwudGFncyk7XG5cblx0aWYgKGRhdGEubm92ZWwucHJlZmFjZSAmJiB0eXBlb2YgZGF0YS5ub3ZlbC5wcmVmYWNlID09ICdzdHJpbmcnKVxuXHR7XG5cdFx0ZGF0YS5ub3ZlbC5wcmVmYWNlID0gbmV3IG1kY29uZi5SYXdPYmplY3QoZGF0YS5ub3ZlbC5wcmVmYWNlLCB7fSk7XG5cdH1cblxuXHRpZiAoJ25vdmVsX3N0YXR1cycgaW4gZGF0YS5ub3ZlbClcblx0e1xuXHRcdGV4cGVjdChkYXRhLm5vdmVsLm5vdmVsX3N0YXR1cykuYSgnbnVtYmVyJyk7XG5cblx0XHRkYXRhLm5vdmVsLm5vdmVsX3N0YXR1cyA9IHRvSGV4KGRhdGEubm92ZWwubm92ZWxfc3RhdHVzLCA0KTtcblx0fVxuXG5cdHJldHVybiBtZGNvbmYuc3RyaW5naWZ5KGRhdGEpICsgTEYucmVwZWF0KDIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoZGF0YToge1xuXHR0b1N0cmluZygpOiBzdHJpbmcsXG59LCBvcHRpb25zPzogSU9wdGlvbnNQYXJzZSk6IElNZGNvbmZNZXRhXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoZGF0YTogc3RyaW5nLCBvcHRpb25zPzogSU9wdGlvbnNQYXJzZSk6IElNZGNvbmZNZXRhXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoZGF0YSwgb3B0aW9uczogSU9wdGlvbnNQYXJzZSA9IHt9KTogSU1kY29uZk1ldGFcbntcblx0aWYgKG9wdGlvbnMucmVtb3ZlUmF3RGF0YSlcblx0e1xuXHRcdG9wdGlvbnMub2xkUGFyc2VBcGkgPSBvcHRpb25zLnJlbW92ZVJhd0RhdGE7XG5cdH1cblxuXHRpZiAob3B0aW9ucy5kaXNhYmxlS2V5VG9Mb3dlckNhc2UgPT0gbnVsbClcblx0e1xuXHRcdG9wdGlvbnMuZGlzYWJsZUtleVRvTG93ZXJDYXNlID0gdHJ1ZTtcblx0fVxuXG5cdGxldCByZXQgPSBtZGNvbmYucGFyc2UoY3JsZihkYXRhLnRvU3RyaW5nKCkpLCBvcHRpb25zKSBhcyBJTWRjb25mTWV0YTtcblxuXHR0cnlcblx0e1xuXHRcdGlmIChyZXQubm92ZWwucHJlZmFjZSlcblx0XHR7XG5cdFx0XHRyZXQubm92ZWwucHJlZmFjZSA9IChyZXQubm92ZWwucHJlZmFjZVxuXHRcdFx0XHQmJiByZXQubm92ZWwucHJlZmFjZS5sZW5ndGhcblx0XHRcdFx0JiYgQXJyYXkuaXNBcnJheShyZXQubm92ZWwucHJlZmFjZSkpID8gcmV0Lm5vdmVsLnByZWZhY2Uuam9pbihMRikgOiByZXQubm92ZWwucHJlZmFjZVxuXHRcdFx0O1xuXHRcdH1cblxuXHRcdHJldC5vcHRpb25zID0gZGVlcG1lcmdlKHJldC5vcHRpb25zIHx8IHt9LCB7XG5cblx0XHRcdHRleHRsYXlvdXQ6IHt9LFxuXG5cdFx0fSwgZGVlcG1lcmdlT3B0aW9ucyk7XG5cdH1cblx0Y2F0Y2ggKGUpXG5cdHtcblx0XHRjb25zb2xlLmVycm9yKGUudG9TdHJpbmcoKSk7XG5cdH1cblxuXHRpZiAob3B0aW9ucy5jaGsgfHwgb3B0aW9ucy5jaGsgPT0gbnVsbClcblx0e1xuXHRcdHJldCA9IGNoa0luZm8ocmV0LCBvcHRpb25zKTtcblx0fVxuXG5cdGlmIChvcHRpb25zLnRocm93IHx8IG9wdGlvbnMudGhyb3cgPT0gbnVsbClcblx0e1xuXHRcdHJldCA9IGNoa0luZm8ocmV0LCBvcHRpb25zKTtcblxuXHRcdGlmICghcmV0KVxuXHRcdHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignbWRjb25mX3BhcnNlJyk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKHJldClcblx0e1xuXHRcdHJldCA9IHNvcnRLZXlzKHJldCk7XG5cblx0XHQvL2NvbnNvbGUubG9nKDc3Nyk7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc29ydEtleXMocmV0OiBJTWRjb25mTWV0YSlcbntcblx0cmV0ID0gc29ydE9iamVjdEtleXMocmV0LCBbXG5cdFx0J25vdmVsJyxcblx0XHQnY29udHJpYnV0ZScsXG5cdFx0J29wdGlvbnMnLFxuXHRdKTtcblxuXHRzb3J0U3ViS2V5KCdub3ZlbCcsIFtcblx0XHQndGl0bGUnLFxuXHRcdCd0aXRsZV9zaG9ydCcsXG5cdFx0J3RpdGxlX3poJyxcblx0XHQndGl0bGVfemgxJyxcblx0XHQndGl0bGVfemgyJyxcblx0XHQndGl0bGVfZW4nLFxuXHRcdCd0aXRsZV9qcCcsXG5cdFx0J3RpdGxlX291dHB1dCcsXG5cdFx0J3RpdGxlX290aGVyJyxcblx0XHQnYXV0aG9yJyxcblx0XHQnc291cmNlJyxcblx0XHQnY292ZXInLFxuXHRcdCdwdWJsaXNoZXInLFxuXHRcdCdkYXRlJyxcblx0XHQnc3RhdHVzJyxcblx0XHQnbm92ZWxfc3RhdHVzJyxcblx0XHQncjE4JyxcblxuXHRcdCdzZXJpZXMnLFxuXG5cdFx0J3ByZWZhY2UnLFxuXHRcdCd0YWdzJyxcblx0XSk7XG5cblx0c29ydFN1YktleShbJ25vdmVsJywgJ3RhZ3MnXSwgbnVsbCwgdHJ1ZSk7XG5cdHNvcnRTdWJLZXkoJ2NvbnRyaWJ1dGUnLCBudWxsLCB0cnVlKTtcblx0c29ydFN1YktleSgnb3B0aW9ucycpO1xuXG5cdGZ1bmN0aW9uIHNvcnRTdWJLZXkoa2V5LCBzb3J0TGlzdD86IHN0cmluZ1tdLCB1bmlxdWU/OiBib29sZWFuKVxuXHR7XG5cdFx0bGV0IG9iaiA9IHJldDtcblx0XHRsZXQgcGFyZW50ID0gb2JqO1xuXG5cdFx0Ly9jb25zb2xlLmxvZyhvYmosIHNvcnRMaXN0KTtcblxuXHRcdGlmIChBcnJheS5pc0FycmF5KGtleSkpXG5cdFx0e1xuXHRcdFx0Ly9jb25zb2xlLmxvZyhrZXkpO1xuXG5cdFx0XHRsZXQgX2s7XG5cblx0XHRcdGZvciAobGV0IHZhbHVlIG9mIGtleSlcblx0XHRcdHtcblx0XHRcdFx0aWYgKCEodmFsdWUgaW4gb2JqKSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2codmFsdWUsIHBhcmVudCk7XG5cblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRfayA9IHZhbHVlO1xuXG5cdFx0XHRcdHBhcmVudCA9IG9iajtcblx0XHRcdFx0b2JqID0gcGFyZW50W3ZhbHVlXTtcblx0XHRcdH1cblxuXHRcdFx0a2V5ID0gX2s7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKChrZXkgaW4gcGFyZW50KSlcblx0XHR7XG5cdFx0XHRvYmogPSBwYXJlbnRba2V5XTtcblx0XHR9XG5cdFx0ZWxzZVxuXHRcdHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheShvYmopKVxuXHRcdHtcblx0XHRcdG9iai5zb3J0KCk7XG5cdFx0XHRwYXJlbnRba2V5XSA9IG9iajtcblx0XHRcdGlmICh1bmlxdWUpXG5cdFx0XHR7XG5cdFx0XHRcdHBhcmVudFtrZXldID0gcGFyZW50W2tleV0uZmlsdGVyKGZ1bmN0aW9uICh2KVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cmV0dXJuIHY7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHBhcmVudFtrZXldID0gYXJyYXlfdW5pcXVlKHBhcmVudFtrZXldKTtcblxuXHRcdFx0XHRpZiAocGFyZW50W2tleV0ubGVuZ3RoID09IDEgJiYgKHBhcmVudFtrZXldWzBdID09PSBudWxsIHx8IHR5cGVvZiBwYXJlbnRba2V5XVswXSA9PSAndW5kZWZpbmVkJykpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRwYXJlbnRba2V5XSA9IFtdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0aWYgKGlzUGxhaW5PYmplY3Qob2JqKSlcblx0XHR7XG5cdFx0XHRwYXJlbnRba2V5XSA9IHNvcnRPYmplY3RLZXlzKG9iaiwgc29ydExpc3QpO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGtJbmZvKHJldDogSU1kY29uZk1ldGEsIG9wdGlvbnM6IElPcHRpb25zUGFyc2UgPSB7fSk6IElNZGNvbmZNZXRhXG57XG5cdGlmICghcmV0XG5cdFx0fHwgKFxuXHRcdFx0KCFvcHRpb25zIHx8ICFvcHRpb25zLmxvd0NoZWNrTGV2ZWwpXG5cdFx0XHQmJiAoIXJldC5ub3ZlbCB8fCAhcmV0Lm5vdmVsLnRpdGxlKVxuXHRcdClcblx0KVxuXHR7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRpZiAocmV0Lm5vdmVsKVxuXHR7XG5cdFx0W1xuXHRcdFx0J2F1dGhvcnMnLFxuXHRcdFx0J2lsbHVzdCcsXG5cdFx0XHQndGFncycsXG5cdFx0XHQnc291cmNlcycsXG5cdFx0XS5mb3JFYWNoKGsgPT4ge1xuXHRcdFx0aWYgKGsgaW4gcmV0Lm5vdmVsKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXQubm92ZWxba10gPSBhbnlUb0FycmF5KHJldC5ub3ZlbFtrXSwgdHJ1ZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRpZiAoJ25vdmVsX3N0YXR1cycgaW4gcmV0Lm5vdmVsKVxuXHRcdHtcblx0XHRcdHJldC5ub3ZlbC5ub3ZlbF9zdGF0dXMgPSBlbnZWYWwocmV0Lm5vdmVsLm5vdmVsX3N0YXR1cyk7XG5cblx0XHRcdGlmICh0eXBlb2YgcmV0Lm5vdmVsLm5vdmVsX3N0YXR1cyA9PT0gJ3N0cmluZycgJiYgL14weFtcXGRhLWZdKyQvLnRlc3QocmV0Lm5vdmVsLm5vdmVsX3N0YXR1cykpXG5cdFx0XHR7XG5cdFx0XHRcdHJldC5ub3ZlbC5ub3ZlbF9zdGF0dXMgPSBOdW1iZXIocmV0Lm5vdmVsLm5vdmVsX3N0YXR1cyk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCdjb250cmlidXRlJyBpbiByZXQpXG5cdHtcblx0XHRyZXQuY29udHJpYnV0ZSA9IGFueVRvQXJyYXkocmV0LmNvbnRyaWJ1dGUsIHRydWUpO1xuXHR9XG5cblx0cmV0Lm9wdGlvbnMgPSByZXQub3B0aW9ucyB8fCB7fTtcblxuXHRpZiAodHlwZW9mIHJldC5vcHRpb25zLnRleHRsYXlvdXQgPT09ICdvYmplY3QnKVxuXHR7XG5cdFx0T2JqZWN0LmVudHJpZXMocmV0Lm9wdGlvbnMudGV4dGxheW91dClcblx0XHRcdC5mb3JFYWNoKChbaywgdl0pID0+IHJldC5vcHRpb25zLnRleHRsYXlvdXRba10gPSBlbnZWYWwodikpXG5cdFx0O1xuXHR9XG5cblx0aWYgKHR5cGVvZiByZXQub3B0aW9ucy5kb3dubG9hZE9wdGlvbnMgPT09ICdvYmplY3QnKVxuXHR7XG5cdFx0T2JqZWN0LmVudHJpZXMocmV0Lm9wdGlvbnMuZG93bmxvYWRPcHRpb25zKVxuXHRcdFx0LmZvckVhY2goKFtrLCB2XSkgPT4gcmV0Lm9wdGlvbnMuZG93bmxvYWRPcHRpb25zW2tdID0gZW52VmFsKHYpKVxuXHRcdDtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROb3ZlbFRpdGxlRnJvbU1ldGEobWV0YTogSU1kY29uZk1ldGEpOiBzdHJpbmdbXVxue1xuXHRpZiAobWV0YSAmJiBtZXRhLm5vdmVsKVxuXHR7XG5cdFx0bGV0IGFyciA9IFtcblx0XHRcdFx0J3RpdGxlJyxcblx0XHRcdFx0J3RpdGxlX3NvdXJjZScsXG5cdFx0XHRcdCd0aXRsZV9qcCcsXG5cdFx0XHRcdCd0aXRsZV9qYScsXG5cdFx0XHRcdCd0aXRsZV96aCcsXG5cdFx0XHRcdCd0aXRsZV90dycsXG5cdFx0XHRcdCd0aXRsZV9jbicsXG5cdFx0XHRdLmNvbmNhdChPYmplY3Qua2V5cyhtZXRhLm5vdmVsKSlcblx0XHRcdC5yZWR1Y2UoZnVuY3Rpb24gKGEsIGtleTogc3RyaW5nKVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAoa2V5LmluZGV4T2YoJ3RpdGxlJykgPT09IDApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRhLnB1c2gobWV0YS5ub3ZlbFtrZXldKVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGFcblx0XHRcdH0sIFtdKVxuXHRcdDtcblxuXHRcdGlmIChtZXRhLm5vdmVsLnNlcmllcylcblx0XHR7XG5cdFx0XHRhcnIucHVzaChtZXRhLm5vdmVsLnNlcmllcy5uYW1lKTtcblx0XHRcdGFyci5wdXNoKG1ldGEubm92ZWwuc2VyaWVzLm5hbWVfc2hvcnQpO1xuXHRcdH1cblxuXHRcdGFyciA9IGFycmF5X3VuaXF1ZShhcnIuZmlsdGVyKHYgPT4gdiAmJiAhW1xuXHRcdFx0J3VuZGVmaW5lZCcsXG5cdFx0XHQn6ZW357eoIOOAkOmAo+i8ieOAkScsXG5cdFx0XHQn6YCj6LyJ5LitJyxcblx0XHRdLmluY2x1ZGVzKHYpKSk7XG5cblx0XHRyZXR1cm4gYXJyO1xuXHR9XG5cblx0cmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiBhbnlUb0FycmF5PFQgPSBzdHJpbmc+KGlucHV0OiBUIHwgVFtdLCB1bmlxdWU/OiBib29sZWFuKTogVFtdXG57XG5cdGlmICh0eXBlb2YgaW5wdXQgIT0gJ29iamVjdCcpXG5cdHtcblx0XHRpbnB1dCA9IFtpbnB1dF07XG5cdH1cblxuXHRpZiAodW5pcXVlKVxuXHR7XG5cdFx0aW5wdXQgPSBhcnJheV91bmlxdWUoaW5wdXQgfHwgW10pO1xuXHR9XG5cblx0Ly8gQHRzLWlnbm9yZVxuXHRyZXR1cm4gaW5wdXQ7XG59XG5cbmV4cG9ydCBjb25zdCB2ZXJzaW9uOiBzdHJpbmcgPSByZXF1aXJlKFwiLi9wYWNrYWdlLmpzb25cIikudmVyc2lvbjtcblxuaW1wb3J0ICogYXMgc2VsZiBmcm9tICcuL2luZGV4JztcblxuZXhwb3J0IGltcG9ydCBtZGNvbmZfcGFyc2UgPSBzZWxmLnBhcnNlO1xuXG5leHBvcnQgZGVmYXVsdCBzZWxmO1xuIl19