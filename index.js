"use strict";
/**
 * Created by user on 2018/1/27/027.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const mdconf = require("mdconf2");
exports.mdconf = mdconf;
const crlf_normalize_1 = require("crlf-normalize");
exports.crlf = crlf_normalize_1.crlf;
exports.LF = crlf_normalize_1.LF;
const lib_1 = require("./lib");
exports.array_unique = lib_1.array_unique;
exports.deepmerge = lib_1.deepmerge;
exports.deepmergeOptions = lib_1.deepmergeOptions;
const isPlainObject = require("is-plain-object");
const sortObjectKeys = require("sort-object-keys2");
const json_1 = require("./json");
const env_bool_1 = require("env-bool");
exports.envVal = env_bool_1.envVal;
exports.envBool = env_bool_1.envBool;
const hex_lib_1 = require("hex-lib");
const chai_1 = require("chai");
exports.defaultOptionsParse = {
    removeRawData: true,
    disableKeyToLowerCase: true,
};
function stringify(data, d2, ...argv) {
    data = json_1.default.toNovelInfo(data, d2 || {}, {
        novel: {
            tags: [],
        },
    }, ...argv);
    data = sortKeys(data);
    data.novel.tags.unshift('node-novel');
    data.novel.tags = lib_1.array_unique(data.novel.tags);
    if (data.novel.preface && typeof data.novel.preface == 'string') {
        data.novel.preface = new mdconf.RawObject(data.novel.preface, {});
    }
    if ('novel_status' in data.novel) {
        chai_1.expect(data.novel.novel_status).a('number');
        data.novel.novel_status = hex_lib_1.toHex(data.novel.novel_status, 4);
    }
    return mdconf.stringify(data) + crlf_normalize_1.LF.repeat(2);
}
exports.stringify = stringify;
function parse(data, options = {}) {
    if (options.removeRawData) {
        options.oldParseApi = options.removeRawData;
    }
    if (options.disableKeyToLowerCase == null) {
        options.disableKeyToLowerCase = true;
    }
    let ret = mdconf.parse(crlf_normalize_1.crlf(data.toString()), options);
    try {
        if (ret.novel.preface) {
            ret.novel.preface = (ret.novel.preface
                && ret.novel.preface.length
                && Array.isArray(ret.novel.preface)) ? ret.novel.preface.join(crlf_normalize_1.LF) : ret.novel.preface;
        }
        ret.options = lib_1.deepmerge(ret.options || {}, {
            textlayout: {},
        }, lib_1.deepmergeOptions);
    }
    catch (e) {
        console.error(e.toString());
    }
    if (options.chk || options.chk == null) {
        ret = chkInfo(ret, options);
    }
    if (options.throw || options.throw == null) {
        ret = chkInfo(ret, options);
        if (!ret) {
            throw new Error('mdconf_parse');
        }
    }
    if (ret) {
        ret = sortKeys(ret);
        //console.log(777);
    }
    // @ts-ignore
    return ret;
}
exports.parse = parse;
function sortKeys(ret) {
    ret = sortObjectKeys(ret, [
        'novel',
        'contribute',
        'options',
    ]);
    sortSubKey('novel', [
        'title',
        'title_short',
        'title_zh',
        'title_zh1',
        'title_zh2',
        'title_en',
        'title_jp',
        'title_output',
        'title_other',
        'author',
        'source',
        'cover',
        'publisher',
        'date',
        'status',
        'novel_status',
        'r18',
        'series',
        'preface',
        'tags',
    ]);
    sortSubKey(['novel', 'tags'], null, true);
    sortSubKey('contribute', null, true);
    sortSubKey('options');
    function sortSubKey(key, sortList, unique) {
        let obj = ret;
        let parent = obj;
        //console.log(obj, sortList);
        if (Array.isArray(key)) {
            //console.log(key);
            let _k;
            for (let value of key) {
                if (!(value in obj)) {
                    //console.log(value, parent);
                    return;
                }
                _k = value;
                parent = obj;
                obj = parent[value];
            }
            key = _k;
        }
        else if ((key in parent)) {
            obj = parent[key];
        }
        else {
            return;
        }
        if (Array.isArray(obj)) {
            obj.sort();
            parent[key] = obj;
            if (unique) {
                parent[key] = parent[key].filter(function (v) {
                    return v;
                });
                parent[key] = lib_1.array_unique(parent[key]);
                if (parent[key].length == 1 && (parent[key][0] === null || typeof parent[key][0] == 'undefined')) {
                    parent[key] = [];
                }
            }
            return;
        }
        if (isPlainObject(obj)) {
            parent[key] = sortObjectKeys(obj, sortList);
        }
    }
    return ret;
}
exports.sortKeys = sortKeys;
function chkInfo(ret, options = {}) {
    if (!ret
        || ((!options || !options.lowCheckLevel)
            && (!ret.novel || !ret.novel.title))) {
        return null;
    }
    if (ret.novel) {
        [
            'authors',
            'illusts',
            'tags',
            'sources',
        ].forEach(k => {
            if (k in ret.novel) {
                ret.novel[k] = anyToArray(ret.novel[k], true);
            }
        });
        if ('novel_status' in ret.novel) {
            ret.novel.novel_status = env_bool_1.envVal(ret.novel.novel_status);
            if (typeof ret.novel.novel_status === 'string' && /^0x[\da-f]+$/.test(ret.novel.novel_status)) {
                ret.novel.novel_status = Number(ret.novel.novel_status);
            }
        }
    }
    if ('contribute' in ret) {
        ret.contribute = anyToArray(ret.contribute, true);
    }
    ret.options = ret.options || {};
    if (typeof ret.options.textlayout === 'object') {
        Object.entries(ret.options.textlayout)
            .forEach(([k, v]) => ret.options.textlayout[k] = env_bool_1.envVal(v));
    }
    if (typeof ret.options.downloadOptions === 'object') {
        Object.entries(ret.options.downloadOptions)
            .forEach(([k, v]) => ret.options.downloadOptions[k] = env_bool_1.envVal(v));
    }
    return ret;
}
exports.chkInfo = chkInfo;
function getNovelTitleFromMeta(meta) {
    if (meta && meta.novel) {
        let arr = [
            'title',
            'title_source',
            'title_jp',
            'title_ja',
            'title_zh',
            'title_tw',
            'title_cn',
        ].concat(Object.keys(meta.novel))
            .reduce(function (a, key) {
            if (key.indexOf('title') === 0) {
                a.push(meta.novel[key]);
            }
            return a;
        }, []);
        if (meta.novel.series) {
            arr.push(meta.novel.series.name);
            arr.push(meta.novel.series.name_short);
        }
        arr = lib_1.array_unique(arr.filter(v => v && ![
            'undefined',
            '長編 【連載】',
            '連載中',
        ].includes(v)));
        return arr;
    }
    return [];
}
exports.getNovelTitleFromMeta = getNovelTitleFromMeta;
function anyToArray(input, unique) {
    if (typeof input != 'object') {
        input = [input];
    }
    if (unique) {
        input = lib_1.array_unique(input || []);
    }
    // @ts-ignore
    return input;
}
exports.version = require("./package.json").version;
exports.mdconf_parse = parse;
exports.default = exports;
//# sourceMappingURL=data:application/json;base64,