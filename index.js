"use strict";
/**
 * Created by user on 2018/1/27/027.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const mdconf = require("mdconf2");
exports.mdconf = mdconf;
const crlf_normalize_1 = require("crlf-normalize");
exports.crlf = crlf_normalize_1.crlf;
exports.LF = crlf_normalize_1.LF;
const lib_1 = require("./lib");
exports.array_unique = lib_1.array_unique;
exports.deepmerge = lib_1.deepmerge;
exports.deepmergeOptions = lib_1.deepmergeOptions;
const isPlainObject = require("is-plain-object");
const sortObjectKeys = require("sort-object-keys2");
const json_1 = require("./json");
const env_bool_1 = require("env-bool");
exports.envVal = env_bool_1.envVal;
exports.envBool = env_bool_1.envBool;
const hex_lib_1 = require("hex-lib");
const chai_1 = require("chai");
exports.defaultOptionsParse = {
    removeRawData: true,
};
function stringify(data, d2, ...argv) {
    data = json_1.default.toNovelInfo(data, d2 || {}, {
        novel: {
            tags: [],
        },
    }, ...argv);
    data = sortKeys(data);
    data.novel.tags.unshift('node-novel');
    data.novel.tags = lib_1.array_unique(data.novel.tags);
    if (data.novel.preface && typeof data.novel.preface == 'string') {
        data.novel.preface = new mdconf.RawObject(data.novel.preface, {});
    }
    if ('novel_status' in data.novel) {
        chai_1.expect(data.novel.novel_status).is.type('number').a('number');
        data.novel.novel_status = hex_lib_1.toHex(data.novel.novel_status, 4);
    }
    return mdconf.stringify(data) + crlf_normalize_1.LF.repeat(2);
}
exports.stringify = stringify;
function parse(data, options = {}) {
    if (options.removeRawData) {
        options.oldParseApi = options.removeRawData;
    }
    let ret = mdconf.parse(crlf_normalize_1.crlf(data.toString()), options);
    try {
        if (ret.novel.preface) {
            ret.novel.preface = (ret.novel.preface
                && ret.novel.preface.length
                && Array.isArray(ret.novel.preface)) ? ret.novel.preface.join(crlf_normalize_1.LF) : ret.novel.preface;
        }
        ret.options = lib_1.deepmerge(ret.options || {}, {
            textlayout: {},
        }, lib_1.deepmergeOptions);
    }
    catch (e) {
        console.error(e.toString());
    }
    if (options.chk || options.chk == null) {
        ret = chkInfo(ret, options);
    }
    if (options.throw || options.throw == null) {
        ret = chkInfo(ret, options);
        if (!ret) {
            throw new Error('mdconf_parse');
        }
    }
    if (ret) {
        ret = sortKeys(ret);
        //console.log(777);
    }
    return ret;
}
exports.parse = parse;
function sortKeys(ret) {
    ret = sortObjectKeys(ret, [
        'novel',
        'contribute',
        'options',
    ]);
    sortSubKey('novel', [
        'title',
        'title_short',
        'title_zh',
        'title_zh1',
        'title_zh2',
        'title_en',
        'title_jp',
        'title_output',
        'title_other',
        'author',
        'source',
        'cover',
        'publisher',
        'date',
        'status',
        'novel_status',
        'r18',
        'series',
        'preface',
        'tags',
    ]);
    sortSubKey(['novel', 'tags'], null, true);
    sortSubKey('contribute', null, true);
    sortSubKey('options');
    function sortSubKey(key, sortList, unique) {
        let obj = ret;
        let parent = obj;
        //console.log(obj, sortList);
        if (Array.isArray(key)) {
            //console.log(key);
            let _k;
            for (let value of key) {
                if (!(value in obj)) {
                    //console.log(value, parent);
                    return;
                }
                _k = value;
                parent = obj;
                obj = parent[value];
            }
            key = _k;
        }
        else if ((key in parent)) {
            obj = parent[key];
        }
        else {
            return;
        }
        if (Array.isArray(obj)) {
            obj.sort();
            parent[key] = obj;
            if (unique) {
                parent[key] = parent[key].filter(function (v) {
                    return v;
                });
                parent[key] = lib_1.array_unique(parent[key]);
                if (parent[key].length == 1 && (parent[key][0] === null || typeof parent[key][0] == 'undefined')) {
                    parent[key] = [];
                }
            }
            return;
        }
        if (isPlainObject(obj)) {
            parent[key] = sortObjectKeys(obj, sortList);
        }
    }
    return ret;
}
exports.sortKeys = sortKeys;
function chkInfo(ret, options = {}) {
    if (!ret
        || ((!options || !options.lowCheckLevel)
            && (!ret.novel || !ret.novel.title))) {
        return null;
    }
    if (ret.novel) {
        [
            'authors',
            'illust',
            'tags',
            'sources',
        ].forEach(k => {
            if (k in ret.novel) {
                ret.novel[k] = anyToArray(ret.novel[k], true);
            }
        });
        if ('novel_status' in ret.novel) {
            ret.novel.novel_status = env_bool_1.envVal(ret.novel.novel_status);
            if (typeof ret.novel.novel_status === 'string' && /^0x[\da-f]+$/.test(ret.novel.novel_status)) {
                ret.novel.novel_status = Number(ret.novel.novel_status);
            }
        }
    }
    if ('contribute' in ret) {
        ret.contribute = anyToArray(ret.contribute, true);
    }
    ret.options = ret.options || {};
    if (typeof ret.options.textlayout === 'object') {
        Object.entries(ret.options.textlayout)
            .forEach(([k, v]) => ret.options.textlayout[k] = env_bool_1.envVal(v));
    }
    if (typeof ret.options.downloadoptions === 'object') {
        Object.entries(ret.options.downloadoptions)
            .forEach(([k, v]) => ret.options.downloadoptions[k] = env_bool_1.envVal(v));
    }
    return ret;
}
exports.chkInfo = chkInfo;
function anyToArray(input, unique) {
    if (typeof input != 'object') {
        input = [input];
    }
    if (unique) {
        input = lib_1.array_unique(input || []);
    }
    // @ts-ignore
    return input;
}
exports.version = require("./package.json").version;
const self = require("./index");
exports.mdconf_parse = self.parse;
exports.default = self;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBR0gsa0NBQWtDO0FBV3pCLHdCQUFNO0FBVmYsbURBQTBDO0FBVVgsZUFWdEIscUJBQUksQ0FVc0I7QUFBRSxhQVZ0QixtQkFBRSxDQVVzQjtBQVR2QywrQkFBa0U7QUFTakQsdUJBVFIsa0JBQVksQ0FTUTtBQUNwQixvQkFWYyxlQUFTLENBVWQ7QUFBRSwyQkFWYyxzQkFBZ0IsQ0FVZDtBQVJwQyxpREFBaUQ7QUFDakQsb0RBQW9EO0FBQ3BELGlDQUE0QjtBQUM1Qix1Q0FBMkM7QUFNbEMsaUJBTkEsaUJBQU0sQ0FNQTtBQUFFLGtCQU5BLGtCQUFPLENBTUE7QUFMeEIscUNBQWdDO0FBQ2hDLCtCQUE4QjtBQXVHakIsUUFBQSxtQkFBbUIsR0FBa0I7SUFDakQsYUFBYSxFQUFFLElBQUk7Q0FDbkIsQ0FBQztBQUVGLFNBQWdCLFNBQVMsQ0FBQyxJQUFJLEVBQUUsRUFBRyxFQUFFLEdBQUcsSUFBSTtJQUUzQyxJQUFJLEdBQUcsY0FBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRTtRQUN6QyxLQUFLLEVBQUU7WUFDTixJQUFJLEVBQUUsRUFBRTtTQUNSO0tBQ0QsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBRVosSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsa0JBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxRQUFR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IDIwMTgvMS8yNy8wMjcuXG4gKi9cblxuaW1wb3J0IHsgRW51bU5vdmVsU3RhdHVzIH0gZnJvbSAnLi9saWIvY29uc3QnO1xuaW1wb3J0ICogYXMgbWRjb25mIGZyb20gJ21kY29uZjInO1xuaW1wb3J0IHsgY3JsZiwgTEYgfSBmcm9tICdjcmxmLW5vcm1hbGl6ZSc7XG5pbXBvcnQgeyBhcnJheV91bmlxdWUsIGRlZXBtZXJnZSwgZGVlcG1lcmdlT3B0aW9ucyB9IGZyb20gJy4vbGliJztcbmltcG9ydCAqIGFzIG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0ICogYXMgaXNQbGFpbk9iamVjdCBmcm9tICdpcy1wbGFpbi1vYmplY3QnO1xuaW1wb3J0ICogYXMgc29ydE9iamVjdEtleXMgZnJvbSAnc29ydC1vYmplY3Qta2V5czInO1xuaW1wb3J0IEpzb25NZCBmcm9tICcuL2pzb24nO1xuaW1wb3J0IHsgZW52VmFsLCBlbnZCb29sIH0gZnJvbSAnZW52LWJvb2wnO1xuaW1wb3J0IHsgdG9IZXggfSBmcm9tICdoZXgtbGliJztcbmltcG9ydCB7IGV4cGVjdCB9IGZyb20gJ2NoYWknO1xuXG5leHBvcnQgeyBtZGNvbmYsIGFycmF5X3VuaXF1ZSwgY3JsZiwgTEYgfVxuZXhwb3J0IHsgZGVlcG1lcmdlLCBkZWVwbWVyZ2VPcHRpb25zIH1cbmV4cG9ydCB7IGVudlZhbCwgZW52Qm9vbCB9XG5cbmV4cG9ydCB0eXBlIElOdW1iZXIgPSBudW1iZXIgfCBzdHJpbmc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1kY29uZk1ldGFPcHRpb25zQmFzZTxUID0gYW55Plxue1xuXHRba2V5OiBzdHJpbmddOiBULFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElNZGNvbmZNZXRhT3B0aW9uc05vdmVsU2l0ZSBleHRlbmRzIElNZGNvbmZNZXRhT3B0aW9uc0Jhc2Vcbntcblx0bm92ZWxfaWQ/OiBJTnVtYmVyLFxuXHR1cmw/OiBzdHJpbmcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1kY29uZk1ldGFcbntcblx0bm92ZWw/OiB7XG5cdFx0dGl0bGU/OiBzdHJpbmcsXG5cdFx0dGl0bGVfc291cmNlPzogc3RyaW5nLFxuXG5cdFx0dGl0bGVfc2hvcnQ/OiBzdHJpbmcsXG5cdFx0dGl0bGVfb3V0cHV0Pzogc3RyaW5nLFxuXHRcdHRpdGxlX290aGVyPzogc3RyaW5nLFxuXG5cdFx0dGl0bGVfemgxPzogc3RyaW5nLFxuXHRcdHRpdGxlX3poMj86IHN0cmluZyxcblxuXHRcdHRpdGxlX3poPzogc3RyaW5nLFxuXHRcdHRpdGxlX2NuPzogc3RyaW5nLFxuXHRcdHRpdGxlX3R3Pzogc3RyaW5nLFxuXHRcdHRpdGxlX2VuPzogc3RyaW5nLFxuXHRcdHRpdGxlX2pwPzogc3RyaW5nLFxuXG5cdFx0YXV0aG9yPzogc3RyaW5nLFxuXHRcdGF1dGhvcnM/OiBzdHJpbmdbXSxcblxuXHRcdGNvdmVyPzogc3RyaW5nLFxuXHRcdGlsbHVzdD86IHN0cmluZ1tdLFxuXG5cdFx0cHJlZmFjZT86IHN0cmluZyxcblx0XHR0YWdzPzogc3RyaW5nW10sXG5cdFx0ZGF0ZT86IHN0cmluZyxcblx0XHRzdGF0dXM/OiBzdHJpbmcsXG5cdFx0cjE4Pzogc3RyaW5nLFxuXG5cdFx0c2VyaWVzPzoge1xuXHRcdFx0bmFtZT86IHN0cmluZyxcblx0XHRcdG5hbWVfc2hvcnQ/OiBzdHJpbmcsXG5cdFx0XHRwb3NpdGlvbj86IG51bWJlcixcblx0XHR9LFxuXG5cdFx0c291cmNlPzogc3RyaW5nLFxuXHRcdHNvdXJjZXM/OiBzdHJpbmdbXSxcblxuXHRcdHB1Ymxpc2hlcj86IHN0cmluZyxcblxuXHRcdG5vdmVsX3N0YXR1cz86IEVudW1Ob3ZlbFN0YXR1cyxcblx0fVxuXG5cdGNvbnRyaWJ1dGU/OiBzdHJpbmdbXSxcblxuXHRvcHRpb25zPzogSU1kY29uZk1ldGFPcHRpb25zQmFzZSAmIHtcblxuXHRcdGRtemo/OiBJTWRjb25mTWV0YU9wdGlvbnNOb3ZlbFNpdGUsXG5cdFx0a2FrdXlvbXU/OiBJTWRjb25mTWV0YU9wdGlvbnNOb3ZlbFNpdGUsXG5cdFx0d2Vua3U4PzogSU1kY29uZk1ldGFPcHRpb25zTm92ZWxTaXRlLFxuXHRcdHdlYnF4cz86IElNZGNvbmZNZXRhT3B0aW9uc05vdmVsU2l0ZSxcblx0XHRzeW9zZXR1PzogSU1kY29uZk1ldGFPcHRpb25zTm92ZWxTaXRlICYge1xuXHRcdFx0dHh0ZG93bmxvYWRfaWQ6IElOdW1iZXIsXG5cdFx0fSxcblxuXHRcdG5vdmVsPzogSU1kY29uZk1ldGFPcHRpb25zQmFzZSAmIHtcblx0XHRcdHBhdHRlcm4/OiBzdHJpbmcsXG5cdFx0fSxcblxuXHRcdHRleHRsYXlvdXQ/OiBJTWRjb25mTWV0YU9wdGlvbnNCYXNlICYge1xuXHRcdFx0YWxsb3dfbGYyPzogYm9vbGVhbixcblx0XHRcdGFsbG93X2xmMz86IGJvb2xlYW4sXG5cdFx0fSxcblxuXHR9LFxuXG5cdGxpbms/OiBzdHJpbmdbXSxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJT3B0aW9uc1BhcnNlIGV4dGVuZHMgbWRjb25mLklPcHRpb25zUGFyc2Vcbntcblx0Y2hrPzogYm9vbGVhbixcblx0dGhyb3c/OiBib29sZWFuLFxuXG5cdHJlbW92ZVJhd0RhdGE/OiBib29sZWFuLFxuXG5cdC8qKlxuXHQgKiDlhYHoqLHmrpjnvLrkuI3lkIjms5XnmoQgbWV0YSBpbmZvXG5cdCAqL1xuXHRsb3dDaGVja0xldmVsPzogYm9vbGVhbixcbn1cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRPcHRpb25zUGFyc2U6IElPcHRpb25zUGFyc2UgPSB7XG5cdHJlbW92ZVJhd0RhdGE6IHRydWUsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5KGRhdGEsIGQyPywgLi4uYXJndik6IHN0cmluZ1xue1xuXHRkYXRhID0gSnNvbk1kLnRvTm92ZWxJbmZvKGRhdGEsIGQyIHx8IHt9LCB7XG5cdFx0bm92ZWw6IHtcblx0XHRcdHRhZ3M6IFtdLFxuXHRcdH0sXG5cdH0sIC4uLmFyZ3YpO1xuXG5cdGRhdGEgPSBzb3J0S2V5cyhkYXRhKTtcblx0ZGF0YS5ub3ZlbC50YWdzLnVuc2hpZnQoJ25vZGUtbm92ZWwnKTtcblx0ZGF0YS5ub3ZlbC50YWdzID0gYXJyYXlfdW5pcXVlKGRhdGEubm92ZWwudGFncyk7XG5cblx0aWYgKGRhdGEubm92ZWwucHJlZmFjZSAmJiB0eXBlb2YgZGF0YS5ub3ZlbC5wcmVmYWNlID09ICdzdHJpbmcnKVxuXHR7XG5cdFx0ZGF0YS5ub3ZlbC5wcmVmYWNlID0gbmV3IG1kY29uZi5SYXdPYmplY3QoZGF0YS5ub3ZlbC5wcmVmYWNlLCB7fSk7XG5cdH1cblxuXHRpZiAoJ25vdmVsX3N0YXR1cycgaW4gZGF0YS5ub3ZlbClcblx0e1xuXHRcdGV4cGVjdChkYXRhLm5vdmVsLm5vdmVsX3N0YXR1cykuaXMudHlwZSgnbnVtYmVyJykuYSgnbnVtYmVyJyk7XG5cblx0XHRkYXRhLm5vdmVsLm5vdmVsX3N0YXR1cyA9IHRvSGV4KGRhdGEubm92ZWwubm92ZWxfc3RhdHVzLCA0KTtcblx0fVxuXG5cdHJldHVybiBtZGNvbmYuc3RyaW5naWZ5KGRhdGEpICsgTEYucmVwZWF0KDIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoZGF0YToge1xuXHR0b1N0cmluZygpOiBzdHJpbmcsXG59LCBvcHRpb25zPzogSU9wdGlvbnNQYXJzZSk6IElNZGNvbmZNZXRhXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoZGF0YTogc3RyaW5nLCBvcHRpb25zPzogSU9wdGlvbnNQYXJzZSk6IElNZGNvbmZNZXRhXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UoZGF0YSwgb3B0aW9uczogSU9wdGlvbnNQYXJzZSA9IHt9KTogSU1kY29uZk1ldGFcbntcblx0aWYgKG9wdGlvbnMucmVtb3ZlUmF3RGF0YSlcblx0e1xuXHRcdG9wdGlvbnMub2xkUGFyc2VBcGkgPSBvcHRpb25zLnJlbW92ZVJhd0RhdGE7XG5cdH1cblxuXHRsZXQgcmV0ID0gbWRjb25mLnBhcnNlKGNybGYoZGF0YS50b1N0cmluZygpKSwgb3B0aW9ucykgYXMgSU1kY29uZk1ldGE7XG5cblx0dHJ5XG5cdHtcblx0XHRpZiAocmV0Lm5vdmVsLnByZWZhY2UpXG5cdFx0e1xuXHRcdFx0cmV0Lm5vdmVsLnByZWZhY2UgPSAocmV0Lm5vdmVsLnByZWZhY2Vcblx0XHRcdFx0JiYgcmV0Lm5vdmVsLnByZWZhY2UubGVuZ3RoXG5cdFx0XHRcdCYmIEFycmF5LmlzQXJyYXkocmV0Lm5vdmVsLnByZWZhY2UpKSA/IHJldC5ub3ZlbC5wcmVmYWNlLmpvaW4oTEYpIDogcmV0Lm5vdmVsLnByZWZhY2Vcblx0XHRcdDtcblx0XHR9XG5cblx0XHRyZXQub3B0aW9ucyA9IGRlZXBtZXJnZShyZXQub3B0aW9ucyB8fCB7fSwge1xuXG5cdFx0XHR0ZXh0bGF5b3V0OiB7fSxcblxuXHRcdH0sIGRlZXBtZXJnZU9wdGlvbnMpO1xuXHR9XG5cdGNhdGNoIChlKVxuXHR7XG5cdFx0Y29uc29sZS5lcnJvcihlLnRvU3RyaW5nKCkpO1xuXHR9XG5cblx0aWYgKG9wdGlvbnMuY2hrIHx8IG9wdGlvbnMuY2hrID09IG51bGwpXG5cdHtcblx0XHRyZXQgPSBjaGtJbmZvKHJldCwgb3B0aW9ucyk7XG5cdH1cblxuXHRpZiAob3B0aW9ucy50aHJvdyB8fCBvcHRpb25zLnRocm93ID09IG51bGwpXG5cdHtcblx0XHRyZXQgPSBjaGtJbmZvKHJldCwgb3B0aW9ucyk7XG5cblx0XHRpZiAoIXJldClcblx0XHR7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ21kY29uZl9wYXJzZScpO1xuXHRcdH1cblx0fVxuXG5cdGlmIChyZXQpXG5cdHtcblx0XHRyZXQgPSBzb3J0S2V5cyhyZXQpO1xuXG5cdFx0Ly9jb25zb2xlLmxvZyg3NzcpO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNvcnRLZXlzKHJldDogSU1kY29uZk1ldGEpXG57XG5cdHJldCA9IHNvcnRPYmplY3RLZXlzKHJldCwgW1xuXHRcdCdub3ZlbCcsXG5cdFx0J2NvbnRyaWJ1dGUnLFxuXHRcdCdvcHRpb25zJyxcblx0XSk7XG5cblx0c29ydFN1YktleSgnbm92ZWwnLCBbXG5cdFx0J3RpdGxlJyxcblx0XHQndGl0bGVfc2hvcnQnLFxuXHRcdCd0aXRsZV96aCcsXG5cdFx0J3RpdGxlX3poMScsXG5cdFx0J3RpdGxlX3poMicsXG5cdFx0J3RpdGxlX2VuJyxcblx0XHQndGl0bGVfanAnLFxuXHRcdCd0aXRsZV9vdXRwdXQnLFxuXHRcdCd0aXRsZV9vdGhlcicsXG5cdFx0J2F1dGhvcicsXG5cdFx0J3NvdXJjZScsXG5cdFx0J2NvdmVyJyxcblx0XHQncHVibGlzaGVyJyxcblx0XHQnZGF0ZScsXG5cdFx0J3N0YXR1cycsXG5cdFx0J25vdmVsX3N0YXR1cycsXG5cdFx0J3IxOCcsXG5cblx0XHQnc2VyaWVzJyxcblxuXHRcdCdwcmVmYWNlJyxcblx0XHQndGFncycsXG5cdF0pO1xuXG5cdHNvcnRTdWJLZXkoWydub3ZlbCcsICd0YWdzJ10sIG51bGwsIHRydWUpO1xuXHRzb3J0U3ViS2V5KCdjb250cmlidXRlJywgbnVsbCwgdHJ1ZSk7XG5cdHNvcnRTdWJLZXkoJ29wdGlvbnMnKTtcblxuXHRmdW5jdGlvbiBzb3J0U3ViS2V5KGtleSwgc29ydExpc3Q/OiBzdHJpbmdbXSwgdW5pcXVlPzogYm9vbGVhbilcblx0e1xuXHRcdGxldCBvYmogPSByZXQ7XG5cdFx0bGV0IHBhcmVudCA9IG9iajtcblxuXHRcdC8vY29uc29sZS5sb2cob2JqLCBzb3J0TGlzdCk7XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheShrZXkpKVxuXHRcdHtcblx0XHRcdC8vY29uc29sZS5sb2coa2V5KTtcblxuXHRcdFx0bGV0IF9rO1xuXG5cdFx0XHRmb3IgKGxldCB2YWx1ZSBvZiBrZXkpXG5cdFx0XHR7XG5cdFx0XHRcdGlmICghKHZhbHVlIGluIG9iaikpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKHZhbHVlLCBwYXJlbnQpO1xuXG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0X2sgPSB2YWx1ZTtcblxuXHRcdFx0XHRwYXJlbnQgPSBvYmo7XG5cdFx0XHRcdG9iaiA9IHBhcmVudFt2YWx1ZV07XG5cdFx0XHR9XG5cblx0XHRcdGtleSA9IF9rO1xuXHRcdH1cblx0XHRlbHNlIGlmICgoa2V5IGluIHBhcmVudCkpXG5cdFx0e1xuXHRcdFx0b2JqID0gcGFyZW50W2tleV07XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkob2JqKSlcblx0XHR7XG5cdFx0XHRvYmouc29ydCgpO1xuXHRcdFx0cGFyZW50W2tleV0gPSBvYmo7XG5cdFx0XHRpZiAodW5pcXVlKVxuXHRcdFx0e1xuXHRcdFx0XHRwYXJlbnRba2V5XSA9IHBhcmVudFtrZXldLmZpbHRlcihmdW5jdGlvbiAodilcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHJldHVybiB2O1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRwYXJlbnRba2V5XSA9IGFycmF5X3VuaXF1ZShwYXJlbnRba2V5XSk7XG5cblx0XHRcdFx0aWYgKHBhcmVudFtrZXldLmxlbmd0aCA9PSAxICYmIChwYXJlbnRba2V5XVswXSA9PT0gbnVsbCB8fCB0eXBlb2YgcGFyZW50W2tleV1bMF0gPT0gJ3VuZGVmaW5lZCcpKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0cGFyZW50W2tleV0gPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGlmIChpc1BsYWluT2JqZWN0KG9iaikpXG5cdFx0e1xuXHRcdFx0cGFyZW50W2tleV0gPSBzb3J0T2JqZWN0S2V5cyhvYmosIHNvcnRMaXN0KTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hrSW5mbyhyZXQ6IElNZGNvbmZNZXRhLCBvcHRpb25zOiBJT3B0aW9uc1BhcnNlID0ge30pOiBJTWRjb25mTWV0YVxue1xuXHRpZiAoIXJldFxuXHRcdHx8IChcblx0XHRcdCghb3B0aW9ucyB8fCAhb3B0aW9ucy5sb3dDaGVja0xldmVsKVxuXHRcdFx0JiYgKCFyZXQubm92ZWwgfHwgIXJldC5ub3ZlbC50aXRsZSlcblx0XHQpXG5cdClcblx0e1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0aWYgKHJldC5ub3ZlbClcblx0e1xuXHRcdFtcblx0XHRcdCdhdXRob3JzJyxcblx0XHRcdCdpbGx1c3QnLFxuXHRcdFx0J3RhZ3MnLFxuXHRcdFx0J3NvdXJjZXMnLFxuXHRcdF0uZm9yRWFjaChrID0+IHtcblx0XHRcdGlmIChrIGluIHJldC5ub3ZlbClcblx0XHRcdHtcblx0XHRcdFx0cmV0Lm5vdmVsW2tdID0gYW55VG9BcnJheShyZXQubm92ZWxba10sIHRydWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aWYgKCdub3ZlbF9zdGF0dXMnIGluIHJldC5ub3ZlbClcblx0XHR7XG5cdFx0XHRyZXQubm92ZWwubm92ZWxfc3RhdHVzID0gZW52VmFsKHJldC5ub3ZlbC5ub3ZlbF9zdGF0dXMpO1xuXG5cdFx0XHRpZiAodHlwZW9mIHJldC5ub3ZlbC5ub3ZlbF9zdGF0dXMgPT09ICdzdHJpbmcnICYmIC9eMHhbXFxkYS1mXSskLy50ZXN0KHJldC5ub3ZlbC5ub3ZlbF9zdGF0dXMpKVxuXHRcdFx0e1xuXHRcdFx0XHRyZXQubm92ZWwubm92ZWxfc3RhdHVzID0gTnVtYmVyKHJldC5ub3ZlbC5ub3ZlbF9zdGF0dXMpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICgnY29udHJpYnV0ZScgaW4gcmV0KVxuXHR7XG5cdFx0cmV0LmNvbnRyaWJ1dGUgPSBhbnlUb0FycmF5KHJldC5jb250cmlidXRlLCB0cnVlKTtcblx0fVxuXG5cdHJldC5vcHRpb25zID0gcmV0Lm9wdGlvbnMgfHwge307XG5cblx0aWYgKHR5cGVvZiByZXQub3B0aW9ucy50ZXh0bGF5b3V0ID09PSAnb2JqZWN0Jylcblx0e1xuXHRcdE9iamVjdC5lbnRyaWVzKHJldC5vcHRpb25zLnRleHRsYXlvdXQpXG5cdFx0XHQuZm9yRWFjaCgoW2ssIHZdKSA9PiByZXQub3B0aW9ucy50ZXh0bGF5b3V0W2tdID0gZW52VmFsKHYpKVxuXHRcdDtcblx0fVxuXG5cdGlmICh0eXBlb2YgcmV0Lm9wdGlvbnMuZG93bmxvYWRvcHRpb25zID09PSAnb2JqZWN0Jylcblx0e1xuXHRcdE9iamVjdC5lbnRyaWVzKHJldC5vcHRpb25zLmRvd25sb2Fkb3B0aW9ucylcblx0XHRcdC5mb3JFYWNoKChbaywgdl0pID0+IHJldC5vcHRpb25zLmRvd25sb2Fkb3B0aW9uc1trXSA9IGVudlZhbCh2KSlcblx0XHQ7XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBhbnlUb0FycmF5PFQgPSBzdHJpbmc+KGlucHV0OiBUIHwgVFtdLCB1bmlxdWU/OiBib29sZWFuKTogVFtdXG57XG5cdGlmICh0eXBlb2YgaW5wdXQgIT0gJ29iamVjdCcpXG5cdHtcblx0XHRpbnB1dCA9IFtpbnB1dF07XG5cdH1cblxuXHRpZiAodW5pcXVlKVxuXHR7XG5cdFx0aW5wdXQgPSBhcnJheV91bmlxdWUoaW5wdXQgfHwgW10pO1xuXHR9XG5cblx0Ly8gQHRzLWlnbm9yZVxuXHRyZXR1cm4gaW5wdXQ7XG59XG5cbmV4cG9ydCBjb25zdCB2ZXJzaW9uOiBzdHJpbmcgPSByZXF1aXJlKFwiLi9wYWNrYWdlLmpzb25cIikudmVyc2lvbjtcblxuaW1wb3J0ICogYXMgc2VsZiBmcm9tICcuL2luZGV4JztcblxuZXhwb3J0IGltcG9ydCBtZGNvbmZfcGFyc2UgPSBzZWxmLnBhcnNlO1xuXG5leHBvcnQgZGVmYXVsdCBzZWxmO1xuIl19